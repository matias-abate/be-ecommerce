{
	"info": {
		"_postman_id": "45974723-7abe4cc2-82c9-4ad0-ac58-c84e06140e01",
		"name": "Core Hub Backend API - Documentaci√≥n Completa",
		"description": "# Core Hub Backend API - Documentaci√≥n Completa\n\n## üìã Informaci√≥n General\n\n**Sistema de Mensajer√≠a con RabbitMQ para Core Hub**\n\n- **Versi√≥n**: 1.0.0\n- **√öltima actualizaci√≥n**: 17 de septiembre, 2025\n- **Equipo**: Core Hub Team\n- **Email de Soporte**: support@corehub.com\n\n---\n\n## üéØ Introducci√≥n\n\nCore Hub Backend API es un sistema de mensajer√≠a basado en RabbitMQ que implementa el patr√≥n **Topic Exchange** para proporcionar enrutamiento flexible de mensajes entre servicios.\n\n### Caracter√≠sticas Principales\n\n- ‚úÖ Suscripciones din√°micas a eventos con soporte de wildcards\n- ‚úÖ Webhooks para notificaciones en tiempo real\n- ‚úÖ Gesti√≥n de canales y infraestructura RabbitMQ\n- ‚úÖ Estad√≠sticas y monitoreo por squad\n- ‚úÖ Publicaci√≥n de mensajes con metadata\n- ‚úÖ Inicializaci√≥n autom√°tica de infraestructura\n\n---\n\n## üöÄ Quick Start\n\n### 1. Inicializar la Infraestructura\n\n```http\nPOST {{baseUrl}}/channels/infrastructure/initialize\n```\n\n### 2. Crear una Suscripci√≥n\n\n```http\nPOST {{baseUrl}}/subscribe\nContent-Type: application/json\n\n{\n  \"webhookUrl\": \"https://mi-servicio.com/webhook\",\n  \"squadName\": \"mi-squad\",\n  \"topic\": \"payments.order.created\",\n  \"eventName\": \"orderCreated\"\n}\n```\n\n### 3. Publicar un Mensaje\n\n```http\nPOST {{baseUrl}}/publish\nContent-Type: application/json\n\n{\n  \"destination\": {\n    \"channel\": \"payments\",\n    \"eventName\": \"orderCreated\"\n  },\n  \"messageId\": \"msg-12345\",\n  \"payload\": {\n    \"orderId\": \"ORD-001\",\n    \"amount\": 150.00\n  },\n  \"source\": \"checkout-service\",\n  \"timestamp\": \"2025-08-28T21:55:00Z\"\n}\n```\n\n---\n\n## üìö Tabla de Contenidos\n\n1. [Suscripciones](#suscripciones)\n2. [Gesti√≥n de Canales](#canales)\n3. [Publicaci√≥n de Mensajes](#publicacion)\n4. [Estad√≠sticas y Listado](#estadisticas)\n5. [Wildcards](#wildcards)\n6. [Variables de Entorno](#variables)\n7. [Tests Automatizados](#tests)\n8. [Arquitectura RabbitMQ](#arquitectura)\n9. [Ejemplos de Uso](#ejemplos)\n10. [Troubleshooting](#troubleshooting)\n\n---\n\n## üîî Suscripciones {#suscripciones}\n\n### Crear Suscripci√≥n\n\nCrea una nueva suscripci√≥n a un t√≥pico de mensajer√≠a.\n\n**Endpoint**: `POST /subscribe`\n\n**Request Body**:\n```json\n{\n  \"webhookUrl\": \"https://postman-echo.com/post\",\n  \"squadName\": \"payments-squad\",\n  \"topic\": \"payments.order.created\",\n  \"eventName\": \"orderCreated\"\n}\n```\n\n**Campos**:\n- `webhookUrl` (string, requerido): URL donde se enviar√°n las notificaciones\n- `squadName` (string, requerido): Nombre del equipo/squad\n- `topic` (string, requerido): T√≥pico RabbitMQ (soporta wildcards)\n- `eventName` (string, requerido): Nombre del evento\n\n**Respuesta 201**:\n```json\n{\n  \"subscriptionId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"webhookUrl\": \"https://payments-squad.com/webhook\",\n  \"squadName\": \"payments-squad\",\n  \"topic\": \"payments.order.created\",\n  \"eventName\": \"orderCreated\",\n  \"status\": \"ACTIVE\",\n  \"createdAt\": \"2025-08-28T21:55:00Z\",\n  \"message\": \"Suscripci√≥n creada exitosamente\"\n}\n```\n\n**Errores Comunes**:\n- `400`: URL inv√°lida o formato incorrecto\n- `400`: Wildcard inv√°lido en topic\n- `500`: Error interno del servidor\n\n---\n\n### Obtener Suscripci√≥n por ID\n\n**Endpoint**: `GET /subscribe/{subscriptionId}`\n\n**Par√°metros**:\n- `subscriptionId`: ID √∫nico de la suscripci√≥n\n\n**Respuesta 200**:\n```json\n{\n  \"subscriptionId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"webhookUrl\": \"https://payments-squad.com/webhook\",\n  \"squadName\": \"payments-squad\",\n  \"topic\": \"payments.order.created\",\n  \"eventName\": \"orderCreated\",\n  \"status\": \"ACTIVE\",\n  \"createdAt\": \"2025-08-28T21:55:00Z\",\n  \"message\": \"Suscripci√≥n creada exitosamente\"\n}\n```\n\n**Errores**:\n- `404`: Suscripci√≥n no encontrada\n\n---\n\n### Obtener Todas las Suscripciones Activas\n\n**Endpoint**: `GET /subscribe`\n\nRetorna todas las suscripciones con estado `ACTIVE`.\n\n**Respuesta 200**: Array de suscripciones\n\n---\n\n### Obtener Suscripciones por Squad\n\n**Endpoint**: `GET /subscribe/squad/{squadName}`\n\n**Par√°metros**:\n- `squadName`: Nombre del squad\n\n**Respuesta 200**: Array de suscripciones del squad\n\n---\n\n### Actualizar Estado de Suscripci√≥n\n\n**Endpoint**: `PUT /subscribe/{subscriptionId}/status?status={status}`\n\n**Par√°metros**:\n- `subscriptionId`: ID de la suscripci√≥n\n- `status` (query): Nuevo estado (ACTIVE, INACTIVE, SUSPENDED)\n\n**Respuestas**:\n- `200`: Estado actualizado correctamente\n- `404`: Suscripci√≥n no encontrada\n\n---\n\n### Obtener Estad√≠sticas por Squad\n\n**Endpoint**: `GET /subscribe/stats/squad/{squadName}`\n\nCuenta las suscripciones activas de un squad.\n\n**Respuesta 200** (con suscripciones):\n```json\n3\n```\n\n**Respuesta 200** (sin suscripciones):\n```json\n{\n  \"description\": \"Squad sin suscripciones\",\n  \"value\": 0\n}\n```\n\n---\n\n## üì° Gesti√≥n de Canales {#canales}\n\n### Listar Canales\n\n**Endpoint**: `GET /channels`\n\n**Respuesta 200**:\n```json\n{\n  \"totalCount\": 5,\n  \"channels\": {\n    \"payments\": {\n      \"routingKey\": \"payments.#\",\n      \"infrastructureReady\": true,\n      \"exchange\": \"payments.exchange\"\n    },\n    \"notifications\": {\n      \"routingKey\": \"notifications.#\",\n      \"infrastructureReady\": true,\n      \"exchange\": \"notifications.exchange\"\n    }\n  }\n}\n```\n\n---\n\n### Crear Infraestructura del Canal\n\n**Endpoint**: `POST /channels/{channelName}/infrastructure`\n\nCrea exchanges, queues y bindings para un canal espec√≠fico.\n\n**Respuesta 200**:\n```json\n{\n  \"channel\": \"payments\",\n  \"created\": true,\n  \"message\": \"Infraestructura creada exitosamente\"\n}\n```\n\n---\n\n### Verificar Estado del Canal\n\n**Endpoint**: `GET /channels/{channelName}/status`\n\n**Respuesta 200**:\n```json\n{\n  \"channel\": \"payments\",\n  \"ready\": true,\n  \"exchange\": \"payments.exchange\",\n  \"queues\": 3,\n  \"bindings\": 5\n}\n```\n\n---\n\n### Inicializar Toda la Infraestructura\n\n**Endpoint**: `POST /channels/infrastructure/initialize`\n\nInicializa todos los componentes necesarios del sistema.\n\n**Respuesta 200**:\n```json\n{\n  \"success\": true,\n  \"message\": \"Infraestructura inicializada correctamente\",\n  \"created\": {\n    \"exchanges\": 5,\n    \"queues\": 15,\n    \"bindings\": 25\n  }\n}\n```\n\n---\n\n### Estado de Inicializaci√≥n\n\n**Endpoint**: `GET /channels/infrastructure/status`\n\n**Respuesta 200**:\n```json\n{\n  \"initializationComplete\": true,\n  \"exchanges\": {\n    \"total\": 5,\n    \"created\": 5,\n    \"missing\": 0\n  },\n  \"queues\": {\n    \"total\": 15,\n    \"created\": 15,\n    \"missing\": 0\n  },\n  \"bindings\": {\n    \"total\": 25,\n    \"created\": 25,\n    \"missing\": 0\n  },\n  \"message\": \"Sistema completamente inicializado\"\n}\n```\n\n---\n\n### Diagn√≥stico de Infraestructura\n\n**Endpoint**: `GET /channels/debug/infrastructure`\n\nProporciona informaci√≥n detallada para debugging.\n\n**Respuesta 200**:\n```json\n{\n  \"totalChannels\": 5,\n  \"channels\": {\n    \"payments\": {\n      \"channelName\": \"payments\",\n      \"note\": \"Canal para eventos de pagos\",\n      \"infrastructureReady\": true,\n      \"exchange\": \"payments.exchange\",\n      \"routingKey\": \"payments.#\"\n    }\n  },\n  \"instructions\": [\n    \"Verificar que RabbitMQ est√© corriendo\",\n    \"Ejecutar POST /channels/infrastructure/initialize si falta infraestructura\"\n  ]\n}\n```\n\n---\n\n### Explicar Arquitectura\n\n**Endpoint**: `GET /channels/architecture`\n\nRetorna informaci√≥n sobre el patr√≥n de arquitectura utilizado.\n\n**Respuesta 200**:\n```json\n{\n  \"pattern\": \"Topic Exchange Pattern\",\n  \"description\": \"Usa routing keys con wildcards para enrutamiento flexible\",\n  \"benefits\": [\n    \"Desacoplamiento entre productores y consumidores\",\n    \"Soporte para wildcards (* y #)\",\n    \"Escalabilidad horizontal\"\n  ],\n  \"reference\": \"https://www.rabbitmq.com/tutorials/tutorial-five-python.html\"\n}\n```\n\n---\n\n## üì§ Publicaci√≥n de Mensajes {#publicacion}\n\n### Publicar Mensaje\n\n**Endpoint**: `POST /publish`\n\n**Headers**:\n- `X-Correlation-Id`: ID de correlaci√≥n (opcional)\n- `Content-Type`: application/json\n\n**Request Body**:\n```json\n{\n  \"destination\": {\n    \"channel\": \"payments\",\n    \"eventName\": \"orderCreated\"\n  },\n  \"messageId\": \"msg-12345\",\n  \"payload\": {\n    \"orderId\": \"ORD-001\",\n    \"amount\": 150.00,\n    \"currency\": \"USD\"\n  },\n  \"source\": \"payments-service\",\n  \"timestamp\": \"2025-08-28T21:55:00Z\",\n  \"metadata\": {\n    \"userId\": \"user-123\",\n    \"region\": \"US-WEST\"\n  }\n}\n```\n\n**Campos**:\n- `destination.channel`: Canal donde publicar\n- `destination.eventName`: Nombre del evento\n- `messageId`: Identificador √∫nico del mensaje\n- `payload`: Datos del mensaje (cualquier estructura JSON)\n- `source`: Servicio que origina el mensaje\n- `timestamp`: Timestamp en formato ISO 8601\n- `metadata`: Informaci√≥n adicional (opcional)\n\n**Respuesta 200**:\n```json\n{\n  \"published\": true,\n  \"messageId\": \"msg-12345\",\n  \"timestamp\": \"2025-08-28T21:55:00Z\"\n}\n```\n\n---\n\n## üìä Estad√≠sticas y Listado {#estadisticas}\n\n### Listar Eventos Suscritos\n\n**Endpoint**: `GET /list`\n\nMuestra resumen de todos los eventos suscritos.\n\n**Respuesta 200**:\n```json\n{\n  \"totalSubscriptions\": 3,\n  \"activeSubscriptions\": 3,\n  \"events\": [\n    {\n      \"topic\": \"payments.order.created\",\n      \"eventName\": \"orderCreated\",\n      \"squadName\": \"payments-squad\",\n      \"webhookUrl\": \"https://payments-squad.com/webhook\"\n    },\n    {\n      \"topic\": \"payments.order.*\",\n      \"eventName\": \"order*\",\n      \"squadName\": \"notifications-squad\",\n      \"webhookUrl\": \"https://notifications-squad.com/webhook\"\n    }\n  ]\n}\n```\n\n---\n\n## üîç Wildcards en Topics {#wildcards}\n\nEl sistema soporta dos tipos de wildcards en los topics:\n\n### Asterisco (*) - Coincide con UNA palabra\n\nEjemplos:\n- `payments.order.*` coincide con:\n  - ‚úÖ `payments.order.created`\n  - ‚úÖ `payments.order.updated`\n  - ‚úÖ `payments.order.deleted`\n  - ‚ùå `payments.order.item.added` (m√°s de una palabra despu√©s)\n\n### Hash (#) - Coincide con CERO o M√ÅS palabras\n\nEjemplos:\n- `payments.#` coincide con:\n  - ‚úÖ `payments`\n  - ‚úÖ `payments.order`\n  - ‚úÖ `payments.order.created`\n  - ‚úÖ `payments.order.item.added`\n\n- `#.order.#` coincide con:\n  - ‚úÖ `order`\n  - ‚úÖ `payments.order`\n  - ‚úÖ `payments.order.created`\n  - ‚úÖ `notifications.order.sent`\n\n### Reglas de Wildcards\n\n‚ö†Ô∏è **Restricciones**:\n- El wildcard `#` solo puede usarse al inicio o final del patr√≥n\n- ‚ùå Inv√°lido: `payments.#.created`\n- ‚úÖ V√°lido: `#.created` o `payments.#`\n\n---\n\n## ‚öôÔ∏è Variables de Entorno {#variables}\n\n### Variables Requeridas\n\n| Variable | Descripci√≥n | Ejemplo |\n|----------|-------------|---------|\n| `baseUrl` | URL base del API | `http://localhost:3000` |\n\n### Variables Auto-generadas\n\n| Variable | Descripci√≥n | C√≥mo se genera |\n|----------|-------------|----------------|\n| `subscriptionId` | ID de suscripci√≥n | Autom√°tico al crear suscripci√≥n |\n| `uniq` | Timestamp √∫nico | `Date.now()` en pre-request |\n\n---\n\n## üß™ Tests Automatizados {#tests}\n\nLa collection incluye tests autom√°ticos que verifican:\n\n### Tests de Crear Suscripci√≥n\n\n```javascript\n// Verificar status code\npm.test(\"HTTP 200/201\", () => [200,201].includes(pm.response.code));\n\n// Extraer y guardar subscriptionId\nlet d = pm.response.json();\nconst id = d.subscriptionId || d.id;\nif (id) {\n  pm.environment.set(\"subscriptionId\", id);\n  pm.collectionVariables.set(\"subscriptionId\", id);\n}\n```\n\n### Tests de Validaci√≥n\n\n- ‚úÖ C√≥digos de estado HTTP correctos\n- ‚úÖ Estructura de respuestas JSON\n- ‚úÖ Campos requeridos presentes\n- ‚úÖ Tipos de datos correctos\n- ‚úÖ Formatos v√°lidos (URLs, fechas, UUIDs)\n- ‚úÖ Tiempos de respuesta < 200ms\n\n---\n\n## üèóÔ∏è Arquitectura RabbitMQ {#arquitectura}\n\n### Patr√≥n: Topic Exchange\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  Producer   ‚îÇ\n‚îÇ  (Service)  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ publish\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  Topic Exchange     ‚îÇ\n‚îÇ  core-hub.exchange  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ routing keys\n       ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n       ‚ñº         ‚ñº         ‚ñº\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇQueue‚îÇ   ‚îÇQueue‚îÇ   ‚îÇQueue‚îÇ\n   ‚îÇ  1  ‚îÇ   ‚îÇ  2  ‚îÇ   ‚îÇ  3  ‚îÇ\n   ‚îî‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îò   ‚îî‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îò   ‚îî‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îò\n      ‚îÇ         ‚îÇ         ‚îÇ\n      ‚ñº         ‚ñº         ‚ñº\n  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n  ‚îÇ Web ‚îÇ   ‚îÇ Web ‚îÇ   ‚îÇ Web ‚îÇ\n  ‚îÇhook ‚îÇ   ‚îÇhook ‚îÇ   ‚îÇhook ‚îÇ\n  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n### Componentes\n\n1. **Exchange**: `core-hub.exchange` (tipo Topic)\n2. **Queues**: Una por squad/suscripci√≥n\n3. **Bindings**: Routing keys con wildcards\n4. **Webhooks**: Destinos HTTP para notificaciones\n\n### Ventajas\n\n- üîÑ **Desacoplamiento**: Productores y consumidores independientes\n- üéØ **Enrutamiento Flexible**: Wildcards para patrones complejos\n- üìà **Escalabilidad**: Agregar consumidores sin modificar productores\n- üîç **Filtrado**: Cada squad recibe solo eventos relevantes\n\n---\n\n## üí° Ejemplos de Uso {#ejemplos}\n\n### Ejemplo 1: Suscripci√≥n Simple\n\n```http\n# Paso 1: Crear suscripci√≥n\nPOST {{baseUrl}}/subscribe\nContent-Type: application/json\n\n{\n  \"webhookUrl\": \"https://myapp.com/webhook\",\n  \"squadName\": \"checkout-squad\",\n  \"topic\": \"payments.order.created\",\n  \"eventName\": \"orderCreated\"\n}\n\n# Paso 2: Publicar mensaje\nPOST {{baseUrl}}/publish\nContent-Type: application/json\n\n{\n  \"destination\": {\n    \"channel\": \"payments\",\n    \"eventName\": \"orderCreated\"\n  },\n  \"payload\": {\n    \"orderId\": \"ORD-123\",\n    \"amount\": 99.99\n  },\n  \"source\": \"checkout-service\"\n}\n\n# ‚úÖ El webhook en https://myapp.com/webhook recibir√° el mensaje\n```\n\n---\n\n### Ejemplo 2: M√∫ltiples Suscripciones con Wildcards\n\n```http\n# Squad de Pagos - Solo eventos created\nPOST {{baseUrl}}/subscribe\n{\n  \"squadName\": \"payments-squad\",\n  \"topic\": \"payments.order.created\",\n  \"webhookUrl\": \"https://payments.com/webhook\"\n}\n\n# Squad de Notificaciones - Todos los eventos de orders\nPOST {{baseUrl}}/subscribe\n{\n  \"squadName\": \"notifications-squad\",\n  \"topic\": \"payments.order.*\",\n  \"webhookUrl\": \"https://notifications.com/webhook\"\n}\n\n# Squad de Analytics - TODO lo relacionado con orders\nPOST {{baseUrl}}/subscribe\n{\n  \"squadName\": \"analytics-squad\",\n  \"topic\": \"#.order.#\",\n  \"webhookUrl\": \"https://analytics.com/webhook\"\n}\n\n# Publicar un mensaje\nPOST {{baseUrl}}/publish\n{\n  \"destination\": {\n    \"channel\": \"payments\",\n    \"eventName\": \"orderCreated\"\n  },\n  \"payload\": { \"orderId\": \"ORD-456\" }\n}\n\n# ‚úÖ Los 3 webhooks recibir√°n el mensaje (coincide con los 3 patterns)\n```\n\n---\n\n### Ejemplo 3: Monitoreo de Squad\n\n```http\n# Ver todas las suscripciones del squad\nGET {{baseUrl}}/subscribe/squad/payments-squad\n\n# Ver estad√≠sticas\nGET {{baseUrl}}/subscribe/stats/squad/payments-squad\n\n# Ver suscripci√≥n espec√≠fica\nGET {{baseUrl}}/subscribe/{{subscriptionId}}\n\n# Pausar suscripci√≥n\nPUT {{baseUrl}}/subscribe/{{subscriptionId}}/status?status=INACTIVE\n\n# Reactivar suscripci√≥n\nPUT {{baseUrl}}/subscribe/{{subscriptionId}}/status?status=ACTIVE\n```\n\n---\n\n## üîß Troubleshooting {#troubleshooting}\n\n### Problema: \"Infraestructura no lista\"\n\n**S√≠ntomas**: Mensajes no se entregan, queues no existen\n\n**Soluci√≥n**:\n```http\n# 1. Verificar estado\nGET {{baseUrl}}/channels/infrastructure/status\n\n# 2. Si initializationComplete es false, inicializar\nPOST {{baseUrl}}/channels/infrastructure/initialize\n\n# 3. Verificar resultado\nGET {{baseUrl}}/channels/infrastructure/status\n```\n\n---\n\n### Problema: \"Webhook no recibe mensajes\"\n\n**Verificar**:\n1. ‚úÖ Suscripci√≥n est√° ACTIVE\n2. ‚úÖ Topic coincide con el mensaje publicado\n3. ‚úÖ Webhook URL es accesible\n4. ‚úÖ Webhook responde con HTTP 200\n\n```http\n# Verificar suscripci√≥n\nGET {{baseUrl}}/subscribe/{{subscriptionId}}\n\n# Verificar todas las suscripciones\nGET {{baseUrl}}/list\n\n# Test webhook con Postman Echo\n{\n  \"webhookUrl\": \"https://postman-echo.com/post\"\n}\n```\n\n---\n\n### Problema: \"Wildcard inv√°lido\"\n\n**Error 400**: \"Los wildcards # solo pueden usarse al inicio o final del patr√≥n\"\n\n**Ejemplos**:\n- ‚ùå `payments.#.created` (# en el medio)\n- ‚úÖ `#.created` (# al inicio)\n- ‚úÖ `payments.#` (# al final)\n- ‚úÖ `payments.order.*` (* en cualquier posici√≥n)\n\n---\n\n### Problema: \"Muchas suscripciones duplicadas\"\n\n**Soluci√≥n**: Ver todas las suscripciones de un squad y eliminar duplicados\n\n```http\n# Ver suscripciones del squad\nGET {{baseUrl}}/subscribe/squad/mi-squad\n\n# Desactivar las innecesarias\nPUT {{baseUrl}}/subscribe/{id}/status?status=INACTIVE\n```\n\n---\n\n## üìã C√≥digos de Estado HTTP\n\n| C√≥digo | Significado | Descripci√≥n |\n|--------|-------------|-------------|\n| 200 | OK | Operaci√≥n exitosa |\n| 201 | Created | Recurso creado exitosamente |\n| 400 | Bad Request | Datos inv√°lidos o faltantes |\n| 404 | Not Found | Recurso no encontrado |\n| 500 | Internal Server Error | Error del servidor |\n\n---\n\n## üîê Seguridad\n\n### Recomendaciones\n\n1. **Webhooks**: Usa HTTPS para URLs de webhook\n2. **Validaci√≥n**: Valida el origen de las peticiones en tu webhook\n3. **Timeouts**: Configura timeouts apropiados\n4. **Reintentos**: Implementa l√≥gica de reintentos en caso de falla\n5. **Logging**: Registra todos los mensajes recibidos\n\n---\n\n## üìû Soporte\n\n¬øNecesitas ayuda?\n\n- **Email**: support@corehub.com\n- **Equipo**: Core Hub Team\n- **Documentaci√≥n RabbitMQ**: https://www.rabbitmq.com/tutorials/tutorial-five-python.html\n\n---\n\n## üìù Notas Finales\n\n- Los `subscriptionId` se generan autom√°ticamente (UUID v4)\n- Los timestamps deben estar en formato ISO 8601\n- Los webhooks deben responder < 5 segundos\n- Se recomienda inicializar infraestructura en cada despliegue\n- Las variables se guardan autom√°ticamente en los tests\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": []
}